package com.travelvn.tourbookingsytem.config;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;

//@Configuration
//@EnableWebSecurity
//@EnableMethodSecurity
//@RequiredArgsConstructor
//public class SecurityConfig {
//
//    //C√°c endpoint ƒë∆∞·ª£c ph√©p g·ªçi khi ch∆∞a c√≥ token
//    private final String[] PUBLIC_ENDPOINTS = {"/login",
//            "/auth/token", "/auth/introspect", "/auth/logout", "/auth/refresh","/register"};
//
//    private CustomJwtDecoder jwtDecoder;
//
//    /**
//     * L·ªçc xem c√≥ cho ph√©p g·ªçi API
//     *
//     * @param httpSecurity
//     * @return
//     * @throws Exception
//     */
//    @Bean
//    //Test d√πng h2, th·ª±c t·∫ø d·ª± √°n s·∫Ω ch·∫°y MySQL
//    //Bean ch·ªâ ƒë∆∞·ª£c load l√™n khi d√πng MySQL
////    @ConditionalOnProperty(prefix = "spring",
////        value = "datasource.driverClassName",
////        havingValue = "com.mysql.cj.jdbc.Driver")
//    public SecurityFilterChain filterChain(HttpSecurity httpSecurity, JwtAuthenticationFilter jwtFilter) throws Exception {
//
//        httpSecurity.cors(cors -> cors.configurationSource(request -> {
//            CorsConfiguration config = new CorsConfiguration();
//            config.setAllowedOrigins(Arrays.asList(
//                    "http://localhost:5500",
//                    "http://127.0.0.1:5500"
//            ));
//            config.addAllowedHeader("*");
//            config.addAllowedMethod("*");
//
//            //?
////            config.addExposedHeader("Set-Cookie");
//
//            config.setAllowCredentials(true); //B·ªè comment n·∫øu c·∫ßn thi·∫øt
//            return config;
//        }));
//
//        httpSecurity.httpBasic((basic) -> basic.securityContextRepository(new HttpSessionSecurityContextRepository()));
//
//        //X√°c ƒë·ªãnh filter cho c√°c api
//        //C√≥ v√≠ d·ª• ch·ªâ c√≥ kh√°ch h√†ng m·ªõi ƒë∆∞·ª£c ƒëƒÉng k√Ω -> th·ª≠ th√¥i ch∆∞a ƒëƒÉng k√Ω bi·∫øt ai l√† kh√°ch h√†ng
//        httpSecurity.authorizeHttpRequests(request ->
//                request.requestMatchers(HttpMethod.POST, PUBLIC_ENDPOINTS).permitAll()
////                        .requestMatchers(HttpMethod.POST, "/auth/refresh").hasRole(Role.CUSTOMER.name())
//                        .requestMatchers(HttpMethod.GET, "/myInfo").authenticated()
//                        // Ph√¢n quy·ªÅn cho ADMINISTRATOR
//                        .requestMatchers("/api/user-accounts/**").hasAuthority("ADMINISTRATOR") // Qu·∫£n l√Ω t√†i kho·∫£n h·ªá th·ªëng
//                        .requestMatchers("/api/employees/**").hasAuthority("ADMINISTRATOR") // Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n (bao g·ªìm tour-guides)
//                        .requestMatchers("/api/tour-ratings/**").hasAuthority("ADMINISTRATOR") // Duy·ªát ƒë√°nh gi√°
//                        .requestMatchers("/api/reports/**").hasAuthority("ADMINISTRATOR") // Xem b√°o c√°o th·ªëng k√™
//                        .requestMatchers("/api/me/**").hasAuthority("ADMINISTRATOR") // Qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n c√° nh√¢n
//                        // Ph√¢n quy·ªÅn chung cho ADMINISTRATOR v√† TOUROPERATOR
//                        // /api/customers/**
//                        .requestMatchers(HttpMethod.GET, "/api/customers/**").hasAnyAuthority("ADMINISTRATOR", "TOUROPERATOR") // Xem th√¥ng tin kh√°ch h√†ng
//                        .requestMatchers(HttpMethod.POST, "/api/customers/**").hasAuthority("TOUROPERATOR") // T·∫°o kh√°ch h√†ng (ch·ªâ TOUROPERATOR)
//                        .requestMatchers(HttpMethod.PUT, "/api/customers/**").hasAuthority("TOUROPERATOR") // C·∫≠p nh·∫≠t kh√°ch h√†ng (ch·ªâ TOUROPERATOR)
//                        .requestMatchers(HttpMethod.DELETE, "/api/customers/**").hasAuthority("TOUROPERATOR") // X√≥a kh√°ch h√†ng (ch·ªâ TOUROPERATOR)
//                        // /api/tours/**
//                        .requestMatchers(HttpMethod.GET, "/api/tours/**").hasAnyAuthority("ADMINISTRATOR", "TOUROPERATOR") // Xem tour
//                        .requestMatchers(HttpMethod.POST, "/api/tours/**").hasAuthority("TOUROPERATOR") // T·∫°o tour (ch·ªâ TOUROPERATOR)
//                        .requestMatchers(HttpMethod.PUT, "/api/tours/**").hasAuthority("TOUROPERATOR") // C·∫≠p nh·∫≠t tour (ch·ªâ TOUROPERATOR)
//                        .requestMatchers(HttpMethod.DELETE, "/api/tours/**").hasAuthority("TOUROPERATOR") // X√≥a tour (ch·ªâ TOUROPERATOR)
//                        // Ph√¢n quy·ªÅn cho TOUROPERATOR
//                        .requestMatchers("/api/festivals/**").hasAuthority("TOUROPERATOR") // Qu·∫£n l√Ω l·ªÖ h·ªôi
//                        .requestMatchers("/api/discounts/**").hasAuthority("TOUROPERATOR") // Qu·∫£n l√Ω ch∆∞∆°ng tr√¨nh gi·∫£m gi√°
//                        .requestMatchers("/api/tour-operator/me/**").hasAuthority("TOUROPERATOR") // Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n
//                        .requestMatchers("/api/tour-cancellations/**").hasAuthority("TOUROPERATOR") // Duy·ªát y√™u c·∫ßu h·ªßy tour
//                        .requestMatchers("/api/employees/tour-guides/**").hasAuthority("TOUROPERATOR") // Xem v√† t√¨m ki·∫øm h∆∞·ªõng d·∫´n vi√™n du l·ªãch
//                        // C√°c y√™u c·∫ßu kh√°c ph·∫£i ƒëƒÉng nh·∫≠p
//                        .anyRequest().authenticated());
//
//
//        //Authentication Provider
//        httpSecurity.oauth2ResourceServer(oauth2 ->
//                oauth2.jwt(jwtConfigurer ->
//                        jwtConfigurer.decoder(jwtDecoder)
//                                .jwtAuthenticationConverter(jwtAuthenticationConverter()))
//                        .authenticationEntryPoint(new JWTAuthenticationEntryPoint())
//        );
//
//        //Ch·ªëng t·∫•n c√¥ng XSS - T·∫°m b·ªè - Khi l·∫≠p tr√¨nh FE nh·ªõ b·∫≠t l·∫°i
//        httpSecurity.csrf(AbstractHttpConfigurer::disable);
//
//        httpSecurity.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
//
//        return httpSecurity.build();
//    }
//
////    /**
////     * Implement jwtConfigurer, gi·∫£i m√£ token
////     *
////     * @return
////     */
////    @Bean
////    public JwtDecoder jwtDecoder(){
////        //T·∫°o kh√≥a
////        SecretKeySpec secretKeySpec = new SecretKeySpec(signerKey.getBytes(), "HS512");
////
////        return NimbusJwtDecoder.
////                withSecretKey(secretKeySpec)
////                .macAlgorithm(MacAlgorithm.HS512)
////                .build();
////    };
//
//    /**
//     * chuy·ªÉn ƒë·ªïi JWT th√†nh Authentication
//     *
//     * @return Authentication
//     */
//    @Bean
//    JwtAuthenticationConverter jwtAuthenticationConverter(){
//        //T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng gi√∫p tr√≠ch xu·∫•t quy·ªÅn t·ª´ JWT.
//        JwtGrantedAuthoritiesConverter jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
//
//        //G√°n ph·∫ßn prefix
//        jwtGrantedAuthoritiesConverter.setAuthorityPrefix("");
////Xo√° roll do grantedAuth.. t·ª± ƒë·ªông th√™m ROLE_ ph√≠a tr∆∞·ªõc kh√¥ng h·ª£p trong Role
//
//        //bi·∫øn JWT th√†nh ƒë·ªëi t∆∞·ª£ng Authentication
//        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();
//        converter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
//
//        return converter;
//    }
//
//    @Bean
//    public CorsFilter corsFilter(){
//        CorsConfiguration config = new CorsConfiguration();
//
//        // Ch·ªâ ƒë·ªãnh ngu·ªìn g·ªëc (Frontend)
//        config.setAllowedOrigins(Arrays.asList(
//                "http://localhost:5500",
//                "http://127.0.0.1:5500"
//        ));
//
//        // Cho ph√©p t·∫•t c·∫£ c√°c method (GET, POST, PUT, DELETE, ...)
//        config.addAllowedMethod("*");
//
//        // Cho ph√©p t·∫•t c·∫£ c√°c header
//        config.addAllowedHeader("*");
//
//        // Cho ph√©p g·ª≠i credentials nh∆∞ cookies, Authorization header
////        config.setAllowCredentials(true);
//
//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//        source.registerCorsConfiguration("/**", config);
//
//        return new CorsFilter(source);
//    }
//}
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    // C√°c endpoint ƒë∆∞·ª£c ph√©p g·ªçi khi ch∆∞a c√≥ token
    private final String[] PUBLIC_ENDPOINTS = {"/login", "/auth/token", "/auth/introspect", "/auth/logout", "/auth/refresh","/register"};

    /**
     * L·ªçc xem c√≥ cho ph√©p g·ªçi API
     *
     * @param httpSecurity
     * @return
     * @throws Exception
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf().disable()
                .cors() // üëâ B·∫Øt bu·ªôc th√™m d√≤ng n√†y
                .and()
                .authorizeHttpRequests()
                .requestMatchers(HttpMethod.GET, "/**").permitAll()
                .requestMatchers(HttpMethod.POST, "/**").permitAll()
                .requestMatchers(HttpMethod.PUT, "/**").permitAll()
                .requestMatchers(HttpMethod.DELETE, "/**").permitAll()
                .anyRequest().permitAll();

        return http.build();
    }
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOriginPattern("*"); // Cho ph√©p m·ªçi domain (c√≥ th·ªÉ thay b·∫±ng c·ª• th·ªÉ n·∫øu c·∫ßn)
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

}
